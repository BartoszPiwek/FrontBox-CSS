/* Text */
/**
 *? Create color class using variables
 * 
 ** Function:
 *  .color-list(@color-name-array, @color-variable-prefix, @prefix:color)
 * 
 ** Arguments:
 *  @color-name-array: array with @colors sufix name { ex: foo, fee }
 *  @color-variable-prefix: sufix name for variables { color }
 *  @property: prefix class and property for color { fill }
 * 
 ** Example:
 * 
 *  @color-foo: red;
 *  @color-fee: blue;
 *  @color-string: foo, fee;
 *  .color-list(@color-string, color, fill);
 * 
 ** Output:
 *
 *  fill-foo {
 *    fill: red;
 *  }
 *  fill-fee {
 *    fill: blue;
 *  }
 * 
 */
/*=========================================================================
|| ANCHOR Fix
=========================================================================*/
/**
 * Force an element to self-clear its children
 */
/*=========================================================================
|| Browser
=========================================================================*/
/**
 * Create custom themes for the browser's native scrollbars
 */
/*
Triangle

Markup:
<div class="triangle-up"></div>
<div class="triangle-right"></div>
<div class="triangle-down"></div>
<div class="triangle-left"></div>

Mixin:
triangle($width, $height, $position, $color: '');

Mixin usage:
triangle(40px, 50px, 'up', color('primary'));

Mixin arguments:
$width: number
$height: number
$position: ['up','right','down','left'];
$color: color

Style guide: Functions.triangle
*/
/**
 * Set style for selectors :hover :active :focus ( .add-hover(@css_code); )
 * - add class &--hover for parent element to trigger hover for child element
 * EXAMPLE:
    .foo {
        .add-hover({
            color: red;
        });
    }
 * OUTPUT:
    .foo--hover:hover .foo,
    .foo--hover:hover .foo,
    .foo--hover:hover .foo,
    .foo:hover,
    .foo:active,
    .foo:focus {
        background-color: red;
    }
 */
:root {
  --desktop: 1200;
  --tablet: 992;
  --fablet: 768;
  --mobile: 576;
  --headerStickyDesktop: 50;
  --headerStickyTablet: 40;
  --headerStickyMobile: 30; }

.row {
  display: flex;
  position: relative;
  flex-direction: row;
  flex-wrap: wrap; }
  .row > * {
    display: flex;
    position: relative;
    flex-direction: column;
    flex-grow: 0;
    flex-shrink: 0;
    height: auto !important;
    min-height: 1px; }
    .row > * > * {
      flex: 1 1 auto; }

/*
Wrap

Center the content in specify width.<br>
Add space around content (padding left/right)

Markup:
<div class="wrap">
 <div>content</div>
</div>

Emmet:
.wrap

Mixin:
wrap($max-width, $paddin-x);

Style guide: Flow.wrap
*/
.triangle-up {
  width: 0;
  height: 0;
  border-bottom: 20px solid red;
  border-right: 15px solid transparent;
  border-left: 15px solid transparent; }

.triangle-right {
  width: 0;
  height: 0;
  border-left: 20px solid red;
  border-top: 15px solid transparent;
  border-bottom: 15px solid transparent; }

.triangle-down {
  width: 0;
  height: 0;
  border-top: 20px solid red;
  border-right: 15px solid transparent;
  border-left: 15px solid transparent; }

.triangle-left {
  width: 0;
  height: 0;
  border-right: 20px solid red;
  border-top: 15px solid transparent;
  border-bottom: 15px solid transparent; }

/*# sourceMappingURL=style.css.map */
