// Collection of useful functions

/**
 *? Create color class using variables
 * 
 ** Function:
 *  .color-list(@color-name-array, @color-variable-prefix, @prefix:color)
 * 
 ** Arguments:
 *  @color-name-array: array with @colors sufix name { ex: foo, fee }
 *  @color-variable-prefix: sufix name for variables { color }
 *  @property: prefix class and property for color { fill }
 * 
 ** Example:
 * 
 *  @color-foo: red;
 *  @color-fee: blue;
 *  @color-string: foo, fee;
 *  .color-list(@color-string, color, fill);
 * 
 ** Output:
 *
 *  fill-foo {
 *    fill: red;
 *  }
 *  fill-fee {
 *    fill: blue;
 *  }
 * 
 */

$list: aaa bbb ccc;

@mixin colors() {
}

/*=========================================================================
|| ANCHOR Fix
=========================================================================*/

/**
 * Force an element to self-clear its children
 */
@mixin clearfix {
  *zoom: 1;
  zoom: 1;
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

/*=========================================================================
|| Browser
=========================================================================*/

/**
 * Create custom themes for the browser's native scrollbars
 */
@mixin scrollbar($size, $background, $color) {
  &::-webkit-scrollbar {
    width: $size;
    height: $size;
    background-color: $color;
    -webkit-appearance: none;
  }

  &::-webkit-scrollbar-thumb {
    min-width: $size;
    max-height: $size;
    background-color: $background;
  }

  &::-webkit-scrollbar-track {
    display: none;
  }
}

/*
Triangle

// Generate triangle style

Mixin arguments:
$width: number
$height: number
$position: ['up','right','down','left'];
$color: color

mixin:
triangle($width, $height, $position, $color: '');

mixin_usage:
triangle(40px, 50px, 'up', color('primary'));
triangle(20px, 80px, 'left', color('secondary'));

mixin_output:
<div class="triangle-up"></div>
<div class="triangle-left"></div>

Style guide: Functions.triangle
*/

@mixin triangle($width, $height, $position: 'down', $color: color('primary')) {
  $width-half: $width / 2;
  $bool: ($position != 'left' and $position != 'right');

  width: 0;
  height: 0;

  @if ($position == 'left') {
    border-right: $height solid $color;
  } @else if ($position == 'up') {
    border-bottom: $height solid $color;
  } @else if ($position == 'right') {
    border-left: $height solid $color;
  } @else if ($position == 'down') {
    border-top: $height solid $color;
  }

  @if ($bool == true) {
    border-right: $width-half solid transparent;
    border-left: $width-half solid transparent;
  } @else {
    border-top: $width-half solid transparent;
    border-bottom: $width-half solid transparent;
  }
}
