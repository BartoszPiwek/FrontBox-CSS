// Collection of useful functions

/**
 * Set style for selectors :hover :active :focus ( .add-hover(@css_code); )
 * - add class &--hover for parent element to trigger hover for child element
 * EXAMPLE:
    .foo {
        .add-hover({
            color: red;
        });
    }
 * OUTPUT:
    .foo--hover:hover .foo,
    .foo--hover:hover .foo,
    .foo--hover:hover .foo,
    .foo:hover,
    .foo:active,
    .foo:focus {
        background-color: red;
    }
 */

@mixin hover {

    &--hover:hover &, &--hover:active &,  &--hover:focus &, 
    &--hover-active &, &--hover-active &, &--hover-active &, 
    &:hover,&:active,&:focus 
    {
      @content;
    }
}


/**
 *? Create color class using variables
 * 
 ** Function:
 *  .color-list(@color-name-array, @color-variable-prefix, @prefix:color)
 * 
 ** Arguments:
 *  @color-name-array: array with @colors sufix name { ex: foo, fee }
 *  @color-variable-prefix: sufix name for variables { color }
 *  @property: prefix class and property for color { fill }
 * 
 ** Example:
 * 
 *  @color-foo: red;
 *  @color-fee: blue;
 *  @color-string: foo, fee;
 *  .color-list(@color-string, color, fill);
 * 
 ** Output:
 *
 *  fill-foo {
 *    fill: red;
 *  }
 *  fill-fee {
 *    fill: blue;
 *  }
 * 
 */

$list: aaa bbb ccc;

@mixin colors() {

}

.color-list(@color-name-array, @color-variable-prefix, @prefix:color){
  .for(@color-name-array, {
    @color: ~"@{color-variable-prefix}-@{value}";
    .@{prefix}-@{value} {
      @{prefix}: @@color;
    }
  });
};

/*=========================================================================
|| Fix
=========================================================================*/

/**
 * Force an element to self-clear its children
 */
@mixin clearfix {
    *zoom:1; zoom:1;
    &:before, &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// 300ms delay
.remove_click_delay() {
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

// Remove tap Hightlight
.fixTapHighlight() {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-user-select: none;
}

// Clean white space
.fixWhiteSpace() {
  font-family: none;
  font-size: 0;
  & > * {
    font-size: initial;
    font-family: @font-family;
  }
}

/*=========================================================================
|| Space
=========================================================================*/

.add-holder (@width, @height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: (@height / @width) * 100%;
  }
}

/**
 *? Set space beetween elements in ASIX X/Y
 *
 ** For class: 
 *  .row
 */

// Horizontal space
.space-x(@size) {
	margin-left: ~"-@{size}";
	width: calc(100% + @size);

  & > *:not(.row-gap-ignore) {
		padding-left: @size;
	};
}

// Vertical space 
.space-y(@space) {
	margin-bottom: ~'-@{space} !important';

	& > *:not(.row-space-ignore) {
		padding-bottom: ~'@{space}';
	};
}

/*=========================================================================
|| Loops
=========================================================================*/

.for(@list, @code) {
  & {
    .loop(@i:1) when (@i =< length(@list)) {
      @value: extract(@list, @i);
      @code();
      .loop(@i + 1);
    }
    .loop();
  }
}

.for2(@list, @code) {
  & {
    .loop(@i:1) when (@i =< length(@list)) {
      @value: extract(@list, @i);
      @value2: extract(@list, @i+1);
      @code();
      .loop(@i + 2);
    }
    .loop();
  }
}

.for2-reverse(@for2-reverse_list, @for-2-reverse_code) {
  & {
    @list-length: length(@for2-reverse_list) - 1;
    .loop-function2(@i:@list-length) when (@i > 0) {

      @value: extract(@for2-reverse_list, @i);
      @value2: extract(@for2-reverse_list, @i - 1);
      @for-2-reverse_code();
      .loop-function2(@i - 2);
    }

    .loop-function2();
  }
}

.loop(@count, @code, @begin:1) {
  & {
    .loop(@i:@begin) when (@i =< @count) {
      @value: @i;
      @code();
      .loop(@i + 1);
    }
    .loop();
  }
}

.list(@name-array, @value-array, @code){
  .for(@name-array, {
    @name: extract(@name-array, @i);
    @value: extract(@value-array, @i);
    @code();
  });
};

/*=========================================================================
|| Debug
=========================================================================*/

/**
 * Print @string in terminal output
 */
.console-log(@string) {
    @consoleLog: ~`console.log("[LOG] @{string}")`;
}

//=========================================================================
// ADDON JS


// Google Captcha
.set-captcha(@code) {
    .g-recaptcha > div {
        @code();
    }
}

/*=========================================================================
|| Forms
=========================================================================*/

/**
 * Style the placeholder text of a form element
 */
.add-placeholder(@code) {
    &::-webkit-input-placeholder, /* Chrome/Opera/Safari */
    &::-moz-placeholder, /* Firefox 19+ */
    &:-ms-input-placeholder, /* IE 10+ */
    &:-moz-placeholder { /* Firefox 18- */
	    @code();
	}
}

/**
 * Sets the color of the highlight that appears over a link while it's being tapped
 */
.add-tap(@color:@color-primary) {
    -webkit-tap-highlight-color: @color;
}

/*=========================================================================
|| Tools generator
=========================================================================*/

.make-utilities(@prefix, @property, @data...) {
	@length: length(@data);
	.for(@data,{
		@value: extract(@data, @i);
		.@{prefix}@{value} {
			@{property}: @value ~"!important";
		}
	});
}

.generate-tool-count(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}: ~"@{value}px !important";
    }
  });
}
.generate-tool-count-x(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}-left: ~"@{value}px !important";
      @{prefix}-right: ~"@{value}px !important";
    }
  });
}
.generate-tool-count-y(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}-top: ~"@{value}px !important";
      @{prefix}-bottom: ~"@{value}px !important";
    }
  });
}

.add-tool-silent-y(@prefix, @code...){
  .for(@code, {
    &-@{value} {
      @{prefix}-bottom: ~"@{value}px !important";
      @{prefix}-top: ~"@{value}px !important";
    }
  });
}

.add-tool-silent-x(@prefix, @code...){
  .for(@code, {
    &-@{value} {
      @{prefix}-left: ~"@{value}px !important";
      @{prefix}-right: ~"@{value}px !important";
    }
  });
}

/*=========================================================================
|| Browser
=========================================================================*/

/**
 * Create custom themes for the browser's native scrollbars
 */
@mixin scrollbar($size, $background, $color) {
    &::-webkit-scrollbar {
        -webkit-appearance: none;
        width: $size;
        height: $size;
        background-color: $color;
    }
    &::-webkit-scrollbar-thumb {
        min-width: $size;
        max-height: $size;
        background-color: $background;
    }
    &::-webkit-scrollbar-track {
        display: none;
    }
};

/*=========================================================================
|| Responsive
=========================================================================*/

.responsive( @code ) {
	each(@responsive, {

		@name: @value[name];

		
		& when (@name = default) {
			@prefix: ~"";
			@code();
		}

		& when not (@name = default) {
			@name: @value[name];
			@shortcode: @value[shortcode];
			@breakpoint: @value[breakpoint];
			@prefix: ~"@{shortcode}_";
			@stringDefault: @value[@string][default];

			@media @stringDefault {

				@name: @value[name];
				@shortcode: @value[shortcode];
				@breakpoint: @value[breakpoint];
				@prefix: ~"@{shortcode}_";
				@stringDefault: @value[@string][default];

				@code();
			}
		}

	});
}

.responsiveClass( @code) {
	each(@responsive, {

		@name: @value[name];
		
		& when (@name = default) {
			@prefix: ~"";
			@code();
		}

		& when not (@name = default) {
			@name: @value[name];
			@shortcode: @value[shortcode];
			@breakpoint: @value[breakpoint];
			@prefix: ~"@{shortcode}_";
			@stringDefault: @value[@string][lock];

			@media @stringDefault {

				@name: @value[name];
				@shortcode: @value[shortcode];
				@breakpoint: @value[breakpoint];
				@prefix: ~"@{shortcode}_";
				@stringDefault: @value[@string][lock];

				@code();
			}
		}

	});
}

/*=========================================================================
|| Flow
=========================================================================*/

/**
 * Wrap
 * Centering content in ASIX X
 */

/* Default style */
.wrap {
	margin-left: auto;
	margin-right: auto;
  width: 100%;
}

/* Function */
@mixin wrap($width, $padding: 0) {
    max-width: $width + $padding * 2;

    @if $padding {
        padding-left: $padding;
        padding-right: $padding;
    }
}

