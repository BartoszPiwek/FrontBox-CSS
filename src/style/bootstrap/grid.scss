/*
Grid

Grid CSS using flex

Mixin:
grid($grid-count, $breakpoints)

Mixin arguments:
$grid-count: number? : 12
$grid-breakpoints: { [key: string]: any }? : $breakpoints

Mixin example:
$breakpoint(
	xs: 0,
	sm: 576,
	md: 768,
	lg: 992,
}
@include grid(12, $breakpoints);

Mixin output:
<div class="row">
<div class="col-12 kss-item"></div>
</div>
<div class="row">
<div class="col-11 kss-item"></div>
<div class="col-1 kss-item"></div>
</div>

Style guide: Grid.generate
*/

@mixin grid($grid-count: 12, $grid-breakpoints: $breakpoints) {
	@include responsive($grid-breakpoints) {
		$prefix: &;
		@for $i from 1 through $grid-count {
			@at-root .#{$prefix}col-#{$i} {
				flex-basis: 100% / ($grid-count / $i);
				max-width: 100% / ($grid-count / $i);
			}

			@if $i != $grid-count {
				@at-root .#{$prefix}pull-#{$i} {
					right: 100% / ($grid-count / $i) !important;
				}

				@at-root .#{$prefix}push-#{$i} {
					left: 100% / ($grid-count / $i) !important;
				}

				@at-root .#{$prefix}order-#{$i} {
					order: $i;
				}
			}
		}

		@at-root .#{$prefix}col-shrink {
			flex: 0 0 auto;
		}
	}
}

/*
Row

Style guide: Grid.row
*/
@mixin grid-style {
	.row {
		display: flex;
		position: relative;
		flex-direction: row;
		flex-wrap: wrap;
		width: 100%;

		> * {
			display: flex;
			position: relative;
			flex-direction: column;
			flex-grow: 0;
			flex-shrink: 0;
			height: auto !important;
			min-height: 1px;
		}

		&.row-same {
			* > * {
				flex: 1 1 auto;
			}
		}
	}
}
