/*=========================================================================
|| FILE: _functions.less
===========================================================================
|-TODO
=========================================================================*/


/**
 *? Set style for selectors :hover :active :focus 
 * Set class &--hover for parent element to trigger hover
 * 
 ** Function:
 *  .add-hover(@code);
 * 
 ** Arguments:
 *  @code: normal CSS code
 * 
 ** Example:
 *
 *  .foo {
 *    .add-hover({
 *      color: red;
 *    });
 *  }
 * 
 ** Output
 *
 *  .foo--hover:hover .foo,
 *  .foo--hover:hover .foo,
 *  .foo--hover:hover .foo,
 *  .foo:hover,
 *  .foo:active,
 *  .foo:focus {
 *    background-color: red;
 *  }
 * 
 */

.add-hover(@code){

    &--hover:hover &, 
    &--hover:hover &, 
    &--hover:hover &, 

    &:hover,
    &:active,
    &:focus 
    
    {
      @code();
    }
}

.px2rem(@value) {
  @return: ~`pxtorem('@{value}')`;
}

/**
 *? Create color class using variables
 * 
 ** Function:
 *  .color-list(@color-name-array, @color-variable-prefix, @prefix:color)
 * 
 ** Arguments:
 *  @color-name-array: array with @colors sufix name { ex: foo, fee }
 *  @color-variable-prefix: sufix name for variables { color }
 *  @property: prefix class and property for color { fill }
 * 
 ** Example:
 * 
 *  @color-foo: red;
 *  @color-fee: blue;
 *  @color-string: foo, fee;
 *  .color-list(@color-string, color, fill);
 * 
 ** Output:
 *
 *  fill-foo {
 *    fill: red;
 *  }
 *  fill-fee {
 *    fill: blue;
 *  }
 * 
 */

.color-list(@color-name-array, @color-variable-prefix, @prefix:color){
  .for(@color-name-array, {
    @color: ~"@{color-variable-prefix}-@{value}";
    .@{prefix}-@{value} {
      @{prefix}: @@color;
    }
  });
};


/**
 *? Force an element to self-clear its children
 */

.clearfix() {
  *zoom:1;
  zoom:1;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// 300ms delay
.remove_click_delay() {
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

// Remove tap Hightlight
.fixTapHighlight() {
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-user-select: none;
}

// Clean white space
.fixWhiteSpace() {
  font-family: none;
  font-size: 0;
  & > * {
    font-size: initial;
    font-family: @font-family;
  }
}

//=========================================================================
// Space

.add-holder (@width, @height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: (@height / @width) * 100%;
  }
}

/**
 *? Set space beetween elements in ASIX X/Y
 *
 ** For class: 
 *  .row
 */

// Horizontal space
.space-x(@size) {
	margin-left: ~"-@{size}";
	width: calc(100% + @size);

> div:not(.row-gap-ignore) {
		padding-left: @size;
	};
}

// Vertical space 
.space-y(@space) {
	margin-bottom: ~'-@{space} !important';

	> div:not(.row-space-ignore) {
		padding-bottom: ~'@{space}';
	};
}

//=========================================================================
// RESPONSIVE

.add-responsive(@property, @array) {
  @sm-size: extract(@array, 3);
  @md-size: extract(@array, 2);
  @lg-size: extract(@array, 1);

  // Mobile size
  @{property}: ~"@{sm-size}";

  // Tablet size
  @media @tablet {
    @{property}: ~"@{md-size}";
  }

  // Desktop size
  @media @desktop {
    @{property}: ~"@{lg-size}";
  }

}

//=========================================================================
// Shapes


/**
  * Triangle
  * 
  */

.add-triangle(@width, @height, @position, @color: "") {

  @bool: if((@position = "top") or (@position = "bottom"), true, false);

  width: 0;
  height: 0;
  @widthHalf: @width / 2;
  & when (@position = top) {
    border-bottom: ~"@{height}px" solid @color;
  }
  & when (@position = bottom) {
    border-top: ~"@{height}px" solid @color;
  }
  & when (@position = left) {
    border-right: ~"@{height}px" solid @color;
  }
  & when (@position = right) {
    border-left: ~"@{height}px" solid @color;
  }

  & when (@bool = true) {
   border-left: ~"@{widthHalf}px" solid transparent;
   border-right: ~"@{widthHalf}px" solid transparent;
  }
  & when not (@bool = true) {
   border-top: ~"@{widthHalf}px" solid transparent;
   border-bottom: ~"@{widthHalf}px" solid transparent;
  }
}

//=========================================================================
// Loops


.for(@list, @code) {
  & {
    .loop(@i:1) when (@i =< length(@list)) {
      @value: extract(@list, @i);
      @code();
      .loop(@i + 1);
    }
    .loop();
  }
}

.for2(@list, @code) {
  & {
    .loop(@i:1) when (@i =< length(@list)) {
      @value: extract(@list, @i);
      @value2: extract(@list, @i+1);
      @code();
      .loop(@i + 2);
    }
    .loop();
  }
}

.for2-reverse(@for2-reverse_list, @for-2-reverse_code) {
  & {
    @list-length: length(@for2-reverse_list) - 1;
    .loop-function2(@i:@list-length) when (@i > 0) {

      @value: extract(@for2-reverse_list, @i);
      @value2: extract(@for2-reverse_list, @i - 1);
      @for-2-reverse_code();
      .loop-function2(@i - 2);
    }

    .loop-function2();
  }
}

.loop(@count, @code, @begin:1) {
  & {
    .loop(@i:@begin) when (@i =< @count) {
      @value: @i;
      @code();
      .loop(@i + 1);
    }
    .loop();
  }
}

.list(@name-array, @value-array, @code){
  .for(@name-array, {
    @name: extract(@name-array, @i);
    @value: extract(@value-array, @i);
    @code();
  });
};

//=========================================================================
// Debug

/**
  * Print @string in terminal output
**/

.consoleLog(@string) {
  @consoleLog: ~`(function(){
    console.log("@{string}");
  })()`;
}

//=========================================================================
// ADDON JS


// Google Captcha
.set-captcha(@code) {
  .g-recaptcha > div {
    @code();
  }
}

//=========================================================================
// TYPOGRAPHY


.add-weight(@size:0.5) {
  text-shadow: 0 ~"@{size}"px, ~"@{size}"px 0px, -~"@{size}"px 0px, 0 -~"@{size}"px;
}

.add-tap(@color:@color-primary) {
  @tap: fadeout(@color, 80%);
  -webkit-tap-highlight-color: @tap;
}

.add-font(@title, @name, @style, @weight) {
		@font-face {
		  font-family: '@{title}';
		  src: url('@{path-fonts}@{name}.eot');
		  src: url('@{path-fonts}@{name}.eot?#iefix') format('embedded-opentype'), url('@{path-fonts}@{name}.woff2') format('woff2'), url('@{path-fonts}@{name}.woff') format('woff'), url('@{path-font}@{name}.ttf') format('truetype'), url('@{path-font}@{name}.svg#@{title}') format('svg');
		  font-weight: @weight;
		  font-style: @style;
		}
}

.add-bold(@color, @overlay, @background, @paddingY) {
  position: relative;
  background-color: @overlay;
  transition: none;
    &:after {
    content: attr(data-bold);
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    font-weight: bold;
    color: @color;
    padding: ~"@{paddingY}px";
    background-color: @background;
  }
}

.placeholder(@code) {
	&::-webkit-input-placeholder { /* Chrome/Opera/Safari */
	  @code();
	}
	&::-moz-placeholder { /* Firefox 19+ */
	  @code();
	}
	&:-ms-input-placeholder { /* IE 10+ */
	  @code();
	}
	&:-moz-placeholder { /* Firefox 18- */
	  @code();
	}
}

//=========================================================================
// FOR AUTOMATIC GRUNT


//===== For property when have units
.automatic-unit(@prefix, @sufix, @variables...) {
	@length: length(@variables);

	// Loop
	.for(@variables, {
		.@{prefix}-@{value} { @{sufix}: ~'@{value}px'; }
	});
}

//===== For property when don't have units
.automatic-ununit(@prefix, @sufix, @variables...) {
	@length: length(@variables);

	// Loop
	.for(@variables, {
		.@{prefix}-@{value} { @{sufix}: ~'@{value}'; }
	});
	// end Loop
}

//===== For property when have responsive prefix
.automatic-responsive(@prefix, @sufix, @value, @variables...) {

  // Return @media resolution
	@resName: ~`(function(){
		var array = @{grid-list-js};
		return nameResponsive = array[array.indexOf('@{prefix}') - 1];
	})()`;

	@length: length(@variables);

	// Loop
	.for(@variables, {
		@count: extract(@variables, @length);
		@media @resName {
			.@{prefix}_@{sufix}-@{count} {
				@{value}: ~'@{count}px';
			}
		}
	});
	// end Loop
}

/**
  * Tools generator
**/

.make-utilities (@prefix, @property, @data...) {
	@length: length(@data);
	.for(@data,{
		@value: extract(@data, @i);
		.@{prefix}@{value} {
			@{property}: @value~"!important";
		}
	});
}

.generate-tool-count(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}: ~"@{value}px !important";
    }
  });
}
.generate-tool-count-x(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}-left: ~"@{value}px !important";
      @{prefix}-right: ~"@{value}px !important";
    }
  });
}
.generate-tool-count-y(@prefix, @count){
  .loop(@count, {
    &-@{value} {
      @{prefix}-top: ~"@{value}px !important";
      @{prefix}-bottom: ~"@{value}px !important";
    }
  });
}

.add-tool-silent-y(@prefix, @code...){
  .for(@code, {
    &-@{value} {
      @{prefix}-bottom: ~"@{value}px !important";
      @{prefix}-top: ~"@{value}px !important";
    }
  });
}

.add-tool-silent-x(@prefix, @code...){
  .for(@code, {
    &-@{value} {
      @{prefix}-left: ~"@{value}px !important";
      @{prefix}-right: ~"@{value}px !important";
    }
  });
}