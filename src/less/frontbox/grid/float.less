//=========================================================================
// FILE: grid.less
//=========================================================================
// GRID CORE

//=========================================================================
// DEFAULT COLUMN STYLE IN ROW
//=========================================================================

.row > div:not(.col-ignore) {
	float: left;
}

.row-flex {
	display: flex;
	flex-wrap: wrap;
	flex-direction: row;
	& > .div {
		float: none;
		height: auto !important;
	}
}

@media @tablet {
	.md_row-flex {
		.row-flex();
	}
}

@media @desktop {
	.lg_row-flex {
		.row-flex();
	}
}


//=========================================================================
// DEFAULT ROW STYLE
//=========================================================================

.row {
	width: 100%;
	zoom: 1;
	.clearfix();
	display: inline-block;
	position: relative;
}

.row {

	// Gap beetween columns founded on percent
	&-space {
		margin: 0 -1.25%;
		width: 102.5%;
		> div:not(.ignore) {
			padding: 0 1.25%;
		};
	}

	// Row flex flow
	&-flex {
		display: flex !important;
		flex-direction: row;
		flex-wrap: wrap;
	}

	// Columns have same height
	// test Safari, Firefox, IE
	// do not use height!
	&-same-size {
		display: flex !important;
		flex-direction: row;
		flex-wrap: wrap;
	}

}

//=========================================================================
// GENERATE GRID CLASSES
// Bug with nasting functions: create function inside (loop)
//=========================================================================

.grid-responsive(@i:(length(@grid-list))) when (@i > 0) {

	@grid-name: ~`(function(){
		var array = @{grid-list-js};
		return valueResponsive = array[@{i} - 2];
	})()`;

	@grid-value: ~`(function(){
		var array = @{grid-list-js};
		return nameResponsive = array[@{i} - 1];
	})()`;

		@media @grid-name {

			// Create responsive row class
			.@{grid-value}_row {
				.row();
			}

			// Loop grid-count (default 12) to create class
			.loop(@temp2: @grid-count) when (@temp2 >= 0) {

				& when (@temp2 > 0) {
					.@{grid-value}_col-@{temp2} {
						width: 100%/(@grid-count / @temp2);
					}
				}

				& when not (@temp2 = @grid-count) {
					.@{grid-value}_pull-@{temp2} {
						right: 100%/(@grid-count / @temp2);
					}
					.@{grid-value}_push-@{temp2} {
						left: 100%/(@grid-count / @temp2);
					}
				}
				.loop(@temp2 - 1);

			}
			.loop();
			// End Loop
		}

	.grid-responsive(@i - 2);
}

.loop(@grid-count, {

	.col-@{value} {
		width: 100%/(@grid-count / @value);
		display: block;
		float: left;
		min-height: 1px;
		position: relative;
	}
	& when not (@value = @grid-count) {
		.pull-@{value} {
			right: 100%/(@grid-count / @value);
		}
		.push-@{value} {
			left: 100%/(@grid-count / @value);
		}
	}

});

.grid-responsive();


//=========================================================================
// FUNCTION: ADD GRID COLOLUMN SIZE
//=========================================================================

.add-col(@size, @maxSize, @gap:0) {
	@calcSize: ((@size + @gap) / @maxSize) * 100%;
	max-width: ~"@{calcSize}";
	width: 100%;
}